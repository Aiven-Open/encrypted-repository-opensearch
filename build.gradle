import org.opensearch.gradle.test.RestIntegTestTask
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'
apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin

def pluginName = 'rename'
def pluginDescription = 'Custom plugin'
def projectPath = 'org.opensearch'
def pathToPlugin = 'path.to.plugin'
def pluginClassName = 'RenamePlugin'
group = "RenameGroup"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

spotless {
    java {
        eclipse()
    }
}

tasks.register("preparePluginPathDirs") {
    mustRunAfter clean
    doLast {
        def newPath = pathToPlugin.replace(".", "/")
        mkdir "src/main/java/org/opensearch/$newPath"
        mkdir "src/test/java/org/opensearch/$newPath"
        mkdir "src/yamlRestTest/java/org/opensearch/$newPath"
    }
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = pluginName
                description = pluginDescription
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "OpenSearch"
                        url = "https://github.com/opensearch-project/opensearch-plugin-template-java"
                    }
                }
            }
        }
    }
}

opensearchplugin {
    name "encrypted-repository"
    description "Provides client-side encryption for snapshotting repositories"
    classname "org.opensearch.repository.encrypted.EncryptedRepositoryPlugin"
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE.txt")
}

loggerUsageCheck.enabled = false
validateNebulaPom.enabled = false
dependencyLicenses.enabled = true
thirdPartyAudit.enabled = true
licenseHeaders.enabled = true
testingConventions.enabled = true

buildscript {
    ext {
        opensearch_version = "2.18.0"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    minHeapSize = "1024m"
    maxHeapSize = "1024m"

    include "**/*Tests.class"

    systemProperty "tests.security.manager", "false"
    systemProperty "es.set.netty.runtime.available.processors", "false"
}

dependencies {
    implementation "org.bouncycastle:bcprov-jdk18on:${versions.bouncycastle}"
}

forbiddenPatterns {
    forbiddenPatterns.enabled = false;
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    minHeapSize = "1024m"
    maxHeapSize = "1024m"

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs += ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005"]
    }
    jvmArgs += ["-Djava.security.manager=allow"]
}

testClusters.integTest {
    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}

task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
