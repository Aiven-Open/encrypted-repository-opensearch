import org.opensearch.gradle.test.RestIntegTestTask

apply plugin: "java"
apply plugin: "idea"
apply plugin: "opensearch.opensearchplugin"
apply plugin: "opensearch.yaml-rest-test"
apply plugin: "checkstyle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
    bcVersion = "1.70"
    correttoVersion = "1.6.1"
    conscryptVersion = "2.5.2"
}

tasks.register("preparePluginPathDirs") {
    mustRunAfter clean
    doLast {
        def newPath = pathToPlugin.replace(".", "/")
        mkdir "src/main/java/org/opensearch/$newPath"
        mkdir "src/test/java/org/opensearch/$newPath"
        mkdir "src/yamlRestTest/java/org/opensearch/$newPath"
    }
}

opensearchplugin {
    name "encrypted-repository"
    description "Provides support for snapshots client side encryption"
    classname "org.opensearch.repository.encrypted.EncryptedRepositoryPlugin"
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE.txt")
}

checkstyle {
    toolVersion "8.44"
    configDir rootProject.file("checkstyle/")
}

loggerUsageCheck.enabled = false
validateNebulaPom.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
licenseHeaders.enabled = true
testingConventions.enabled = false

buildscript {
    ext {
        opensearch_version = "1.2.4-SNAPSHOT"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    minHeapSize = "1024m"
    maxHeapSize = "1024m"

    include "**/*Tests.class"
    systemProperty "tests.security.manager", "false"
    systemProperty "es.set.netty.runtime.available.processors", "false"
}

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.32"
    implementation "org.bouncycastle:bcprov-jdk15on:$bcVersion"
    if (hasProperty("crypto_provider_type")) {
        switch (System.properties["crypto_provider_type"]) {
            case "corretto":
                implementation "software.amazon.cryptools:AmazonCorrettoCryptoProvider:$correttoVersion:linux-x86_64"
                break;
            case "conscrypt":
                implementation "org.conscrypt:conscrypt-openjdk:$conscryptVersion:linux-x86_64"
                break;
            default:
                print("Use java sun crypto provider")
        }
    }
}

check.dependsOn jacocoTestReport

forbiddenPatterns {
    forbiddenPatterns.enabled = false;
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    minHeapSize = "1024m"
    maxHeapSize = "1024m"
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005"
    }
}

testClusters.integTest {
    testDistribution = "INTEG_TEST"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}
