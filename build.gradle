import org.opensearch.gradle.test.RestIntegTestTask

apply plugin: "java"
apply plugin: "idea"
apply plugin: "opensearch.opensearchplugin"
apply plugin: "opensearch.yaml-rest-test"
apply plugin: 'opensearch.pluginzip'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.register("preparePluginPathDirs") {
    mustRunAfter clean
    doLast {
        def newPath = pathToPlugin.replace(".", "/")
        mkdir "src/main/java/org/opensearch/$newPath"
        mkdir "src/test/java/org/opensearch/$newPath"
        mkdir "src/yamlRestTest/java/org/opensearch/$newPath"
    }
}

opensearchplugin {
    name "encrypted-repository"
    description "Provides client-side encryption for snapshotting repositories"
    classname "org.opensearch.repository.encrypted.EncryptedRepositoryPlugin"
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE.txt")
}

loggerUsageCheck.enabled = false
validateNebulaPom.enabled = false
dependencyLicenses.enabled = true
thirdPartyAudit.enabled = true
licenseHeaders.enabled = true
testingConventions.enabled = true

buildscript {
    ext {
        opensearch_version = "2.6.0"
        bc_version = "1.70"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    minHeapSize = "1024m"
    maxHeapSize = "1024m"

    include "**/*Tests.class"

    systemProperty "tests.security.manager", "false"
    systemProperty "es.set.netty.runtime.available.processors", "false"
}

dependencies {
    implementation "org.bouncycastle:bcprov-jdk15on:$bc_version"
}

forbiddenPatterns {
    forbiddenPatterns.enabled = false;
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    minHeapSize = "1024m"
    maxHeapSize = "1024m"

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005"
    }
}

testClusters.integTest {
    testDistribution = "INTEG_TEST"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}

task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
